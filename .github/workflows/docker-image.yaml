name: CI/CD

on:
  push:
    tags:
      - "*.*.*"
      - "*.*.*-*.*"
  workflow_dispatch:

jobs:
  build_docker_frontend:
    name: Build Docker Frontend
    runs-on: ubuntu-latest
    env:
      BASE_URL: /api
      AUTH_SERVER_CLIENT_ID: ${{secrets.AUTH_SERVER_CLIENT_ID}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            vastsea/vastsea-sso-frontend
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: packages/frontend
          file: packages/frontend/dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_docker_backend:
    name: Build Docker Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            vastsea/vastsea-sso-backend
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: packages/backend
          file: packages/backend/dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_docker_frontend_acr:
    name: Build Docker Frontend ACR
    runs-on: ubuntu-latest
    env:
      BASE_URL: /api
      AUTH_SERVER_CLIENT_ID: ${{secrets.AUTH_SERVER_CLIENT_ID}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            vastsea/vastsea-sso-frontend
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }}
            - name: Login to ACR
            uses: aliyun/acr-login@v1
            with:
              login-server: https://${{ vars.REGISTRY_ADDRESS }}
              username: "${{ vars.REGISTRY_USERNAME }}"
              password: "${{ secrets.REGISTRY_PASSWORD }}"
      - name: Build and push
        run: |
          docker build -t ${{ vars.REGISTRY_ADDRESS }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} packages/frontend
          docker push ${{ vars.REGISTRY_ADDRESS }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}

  build_docker_backend_acr:
    name: Build Docker Backend ACR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            vastsea/vastsea-sso-backend
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }}
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://${{ vars.REGISTRY_ADDRESS }}
          username: "${{ vars.REGISTRY_USERNAME }}"
          password: "${{ secrets.REGISTRY_PASSWORD }}"
      - name: Build and push
        run: |
          docker build -t ${{ vars.REGISTRY_ADDRESS }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} packages/backend
          docker push ${{ vars.REGISTRY_ADDRESS }}/${{ vars.REGISTRY_NAMESPACE }}/${{ vars.IMAGE_NAME }}:${{ steps.meta.outputs.tags }}

  deploy:
    name: Deploy
    needs: [build_docker_frontend, build_docker_backend, build_docker_frontend_acr, build_docker_backend_acr]
    runs-on: ubuntu-latest
    steps:
      - name: SSH To Host
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.PROJECT_PATH }}
            sudo bash ./deploy.sh
